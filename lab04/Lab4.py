class Item:
    def __init__(self, name, description='', rarity='common'):
        self.name = name
        self.description = description
        self.rarity = rarity
        self._ownership = ''

    def pick_up(self, character):
        if not self._ownership:
            self._ownership = character
            print(f'{self.name} is now owned by {character}')

    def throw_away(self):
        if self._ownership:
            self._ownership = ''
            print(f'{self.name} is thrown away')

    def use(self):
        if self._ownership:
            print(f'{self.name} is used')

    def __str__(self):
        return f'{self.name} ({self.rarity}) - {self.description}'

class Weapon(Item):
    def __init__(self, name, damage, type, rarity='common', description=''):
        super().__init__(name, description, rarity)
        self.damage = damage
        self.type = type
        self.attack_modifier = 1.0
        if self.rarity == 'legendary':
            self.attack_modifier = 1.15

    def equip(self):
        if self._ownership:
            print(f'{self.name} is equipped by {self._ownership}')

    def use(self):
        if self._ownership:
            total_damage = self.damage * self.attack_modifier
            print(f'{self.name} is used, dealing {total_damage} damage')

class Shield(Item):
    def __init__(self, name, defense, broken=False, rarity='common', description=''):
        super().__init__(name, description, rarity)
        self.defense = defense
        self.broken = broken
        self.defense_modifier = 1.0
        if self.rarity == 'legendary':
            self.defense_modifier = 1.10
        if self.broken:
            self.defense_modifier = 0.5

    def equip(self):
        if self._ownership:
            print(f'{self.name} is equipped by {self._ownership}')

    def use(self):
        if self._ownership:
            total_defense = self.defense * self.defense_modifier
            print(f'{self.name} is used, blocking {total_defense} damage')


class Potion(Item):
    def __init__(self, name, owner, value, effective_time=0, rarity='common', description=''):
        super().__init__(name, description, rarity)
        self._ownership = owner
        self.value = value
        self.effective_time = effective_time
        self.used = False 

    def use(self):
        if self._ownership and not self.used:
            self.used = True 
            if 'attack' in self.description.lower():
                print(f'{self._ownership} used {self.name}, and attack increases {self.value} for {self.effective_time}s')
            elif 'defense' in self.description.lower():
                print(f'{self._ownership} used {self.name}, and defense increases {self.value} for {self.effective_time}s')
            elif 'hp' in self.description.lower():
                print(f'{self._ownership} used {self.name}, and HP restored {self.value}')

    @classmethod
    def from_ability(cls, name, owner, type=None):
        description = f'{name} generated by ability'
        if type == 'attack':
            description = f'{name} generated by ability, increasing attack power'
        elif type == 'defense':
            description = f'{name} generated by ability, increasing defense power'
        elif type == 'hp':
            description = f'{name} generated by ability, restoring HP'
        return cls(name, owner, value=50, effective_time=30, rarity='common', description=description)

    def __str__(self):
        return f'{self.name} ({self.rarity}) - {self.description}'


#example from lab

belthronding = Weapon(name='Belthronding', rarity='legendary', damage=5000, type='bow') #changed name next to match beltronding
belthronding.pick_up('Beleg')  # Belthronding is now owned by Beleg
belthronding.equip()  # Belthronding is equipped by Beleg
belthronding.use()  # Belthronding is used, dealing 5750 damage

broken_pot_lid = Shield(name='wooden lid', description='A lid made of wood, useful in cooking. No one will choose it willingly for a shield', defense=5, broken=True)
broken_pot_lid.pick_up('Beleg')  # wooden lid is now owned by Beleg
broken_pot_lid.equip()  # wooden lid is equipped by Beleg
broken_pot_lid.use()  # wooden lid is used, blocking 2.5 damage
broken_pot_lid.throw_away()  # wooden lid is thrown away
broken_pot_lid.use()  # NO OUTPUT

attack_potion = Potion.from_ability(name='atk potion temp', owner='Beleg', type='attack')
attack_potion.use()  # Beleg used atk potion temp, and attack increased 50 for 30s
attack_potion.use()  # NO OUTPUT

print(isinstance(belthronding, Item))  # True
print(isinstance(broken_pot_lid, Shield))  # True
print(isinstance(attack_potion, Weapon))  # False



